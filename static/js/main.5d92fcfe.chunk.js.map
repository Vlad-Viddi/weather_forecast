{"version":3,"sources":["js/components/SearchBox/SearchBox.jsx","js/helpers.js","js/components/WeatherInfo/WeatherInfo.jsx","js/components/Error/Error.jsx","js/components/LoadingSpinner/LoadingSpinner.jsx","js/constants.js","js/App.jsx","index.js"],"names":["SearchBox","query","setQuery","fetchWeather","className","autoFocus","type","placeholder","value","onChange","e","target","onKeyDown","length","getCurrentDate","dateObj","Date","weekDay","getDay","date","getDate","month","getMonth","year","getFullYear","WeatherInfo","weather","temperature","Math","floor","main","temp","weatherType","description","currentCity","name","currentState","sys","country","feelsLike","feels_like","tempMin","temp_min","tempMax","temp_max","humidity","pressure","sunrise","timezone","toLocaleTimeString","slice","sunset","currentTime","dt","tempUnit","Error","error","message","React","memo","LoadingSpinner","API","App","useState","isWeatherReceived","setIsWeatherReceived","setWeather","weatherBg","setWeatherBg","setError","isErrorReturned","setIsErrorReturned","isLoading","setIsLoading","handleFetch","data","cod","icon","dayNight","key","fetch","then","response","json","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5d92fcfe.chunk.js","sourcesContent":["import React from 'react';\n\nexport const SearchBox = ({ query, setQuery, fetchWeather }) => {\n  const getWeather = e => {\n    if(query.length > 1) {\n      fetchWeather(e)\n    }\n  };\n\n  return (\n    <div className=\"search-box\">\n      <input\n        autoFocus\n        type=\"text\"\n        placeholder=\"Enter any city\"\n        className=\"search-bar\"\n        value={query}\n        onChange={e => setQuery(e.target.value)}\n        onKeyDown={getWeather}\n      />\n    </div>\n  )\n}\n","export const getCurrentDate = () => {\n  const dateObj = new Date();\n  const weekDays = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"];\n  const months = [\"January\", \"Fabruary\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n  \n  const weekDay = weekDays[dateObj.getDay()];\n  const date = dateObj.getDate();\n  const month = months[dateObj.getMonth()];\n  const year = dateObj.getFullYear();\n\n  const result = `${weekDay}, ${month} ${date}, ${year}`;\n\n  return result;\n}\n","import React from 'react';\n\nimport { getCurrentDate } from '../../helpers';\n\nconst WeatherInfo = ({ weather }) => {\n\n  const temperature = Math.floor(weather.main.temp);\n  const weatherType = `${weather.weather[0].main} / ${weather.weather[0].description}`;\n  const currentCity = weather.name;\n  const currentState = weather.sys.country;\n  const feelsLike = Math.floor(weather.main.feels_like);\n  const tempMin = Math.floor(weather.main.temp_min);\n  const tempMax = Math.floor(weather.main.temp_max);\n  const humidity = weather.main.humidity;\n  const pressure = weather.main.pressure;\n  const sunrise = (new Date((weather.sys.sunrise + weather.timezone - 10800) * 1000).toLocaleTimeString().slice(0, 5));\n  const sunset = (new Date((weather.sys.sunset + weather.timezone - 10800) * 1000).toLocaleTimeString().slice(0, 5));\n  const currentTime = (new Date((weather.dt + weather.timezone - 10800) * 1000).toLocaleTimeString().slice(0, 5));\n  const tempUnit = {\n    celsius: \"°C\",\n    farhenheit: \"°F\"\n  }\n\n  return (\n    <div className=\"info\">\n      <div className=\"info__location\">{currentCity}, {currentState}</div>\n      <div className=\"info__date\">{getCurrentDate()} - {currentTime}</div>\n\n      <div className=\"info__temp\">\n        {temperature}&deg;C\n      </div>\n      <div className=\"info__weather\">\n        {weatherType}\n      </div>\n      <hr />\n      <div className=\"extra-container\">\n        <div className=\"extra extra--fst\">\n          <div className=\"extra__name\">Feels like</div>\n          <div className=\"extra__value\">{feelsLike}{tempUnit.celsius}</div>\n        </div>\n        <div className=\"extra\">\n          <div className=\"extra__name\">Min temperature</div>\n          <div className=\"extra__value\">{tempMin}{tempUnit.celsius}</div>\n        </div>\n        <div className=\"extra\">\n          <div className=\"extra__name\">Max temperature</div>\n          <div className=\"extra__value\">{tempMax}{tempUnit.celsius}</div>\n        </div>\n        <div className=\"extra\">\n          <div className=\"extra__name\">Sunrise</div>\n          <div className=\"extra__value\">{sunrise}</div>\n        </div>\n        <div className=\"extra\">\n          <div className=\"extra__name\">Sunset</div>\n          <div className=\"extra__value\">{sunset}</div>\n        </div>\n        <div className=\"extra\">\n          <div className=\"extra__name\">Humidity</div>\n          <div className=\"extra__value\">{humidity}%</div>\n        </div>\n        <div className=\"extra extra--last\">\n          <div className=\"extra__name\">Pressure</div>\n          <div className=\"extra__value\">{pressure}hPa</div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default WeatherInfo;\n","import React from 'react';\n\nconst Error = ({ error }) => (\n  <div className=\"info\">\n    <div className=\"info__location\">{error.message}</div>\n  </div>\n)\n\nexport default React.memo(Error);\n","import React from 'react';\n\nexport const LoadingSpinner = () => <div className=\"loader\" />","export const API = {\n  key: '429d2e287145e65ce74197b14fc241f4',\n  baseUrl: 'https://api.openweathermap.org/data/2.5/',\n};\n","/* \n - 1 with query choose city like this:\n  Search for cities starting with Lond: JSON: http://api.weatherapi.com/v1/search.json?key=<YOUR_API_KEY>&q=lond\n - 2 when we got city second request for weather like this:\n   http://api.weatherapi.com/v1/current.json?key=<YOUR_API_KEY>&q=<QUERY>\n\n\n/*\n  Search for cities starting with Lond: JSON: http://api.weatherapi.com/v1/search.json?key=<YOUR_API_KEY>&q=lond\n\n  So to get current weather for London: JSON: http://api.weatherapi.com/v1/current.json?key=<YOUR_API_KEY>&q=London\n\n  To get 7 day weather for US Zipcode 07112: JSON: http://api.weatherapi.com/v1/forecast.json?key=<YOUR_API_KEY>&q=07112&days=7\n\n*/\n\nimport React, { useState } from 'react';\n\nimport { SearchBox } from './components/SearchBox/SearchBox';\nimport WeatherInfo from './components/WeatherInfo/WeatherInfo';\nimport Error from './components/Error/Error';\nimport { LoadingSpinner } from './components/LoadingSpinner/LoadingSpinner';\nimport { API } from './constants';\n\nconst App = () => {\n  const [ query, setQuery ] = useState('');\n  const [ isWeatherReceived, setIsWeatherReceived ] = useState(false);\n  const [ weather, setWeather ] = useState({});\n  const [ weatherBg, setWeatherBg ] = useState('');\n  const [ error, setError ] = useState({});\n  const [ isErrorReturned, setIsErrorReturned ] = useState(false);\n  const [ isLoading, setIsLoading ] = useState(false);\n\n  const handleFetch = data => {\n    if(data.cod === \"404\") {\n      setIsLoading(false);\n      setIsErrorReturned(true);\n      setIsWeatherReceived(false);\n      setError(data);\n      setWeather({});\n    } else if (data.cod === 200) {\n      setIsLoading(false);\n      setWeather(data);\n      setWeatherBg(data.weather[0].icon);\n      setError({});\n      setIsErrorReturned(false);\n      setIsWeatherReceived(true);\n    }\n  }\n\n  const fetchWeather = e => {\n    if(e.key === \"Enter\") {\n      setIsLoading(true);\n      setIsErrorReturned(false);\n      setIsWeatherReceived(false);\n      fetch(`${API.baseUrl}weather?q=${query}&units=metric&APPID=${API.key}`)\n        .then(response => response.json())\n        .then(handleFetch)\n    }\n  }\n\n\n  const dayNight = weatherBg.slice(-1) === 'n' ? 'night' : '';\n\n  return (\n    <div\n      className={`app app-${weatherBg}`}\n    >\n      <main className=\"content\">\n        <h1 className={`appTitle appTitle--${dayNight}`}>Weather Forecast App</h1>\n        <SearchBox\n          query={query}\n          setQuery={setQuery}\n          fetchWeather={fetchWeather}\n        />\n        {isWeatherReceived && (\n          <WeatherInfo\n            weather={weather}\n          />\n        )}\n        {isErrorReturned && (\n          <Error\n            error={error}\n          />\n        )}\n        {isLoading && (<LoadingSpinner />)}\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './js/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}
{"version":3,"sources":["js/components/SearchBox/SearchBox.jsx","js/customHooks.js","js/components/Tooltip/Tooltip.jsx","js/helpers.js","imgs/svg/done_icon.svg","imgs/svg/plus_icon.svg","js/components/WeatherInfo/WeatherInfo.jsx","js/components/Error/Error.jsx","js/components/LoadingSpinner/LoadingSpinner.jsx","js/constants.js","imgs/svg/trash_icon.svg","js/components/FavCity/FavCity.jsx","js/components/FavCities/FavCities.jsx","js/App.jsx","index.js"],"names":["SearchBox","query","setQuery","fetchWeather","htmlElRef","useRef","current","focus","useFocus","inputRef","setInputFocus","className","autoFocus","ref","type","placeholder","value","onChange","e","target","onKeyDown","length","onBlur","Tooltip","children","getCurrentDate","dateObj","Date","weekDay","getDay","date","getDate","month","getMonth","year","getFullYear","alreadyHasCity","favCities","city","includes","WeatherInfo","weather","setFavCities","useState","isTipShown","setIsTipShown","temperature","Math","floor","main","temp","weatherType","description","currentCity","name","currentState","sys","country","feelsLike","feels_like","tempMin","temp_min","tempMax","temp_max","humidity","pressure","sunrise","timezone","toLocaleTimeString","slice","sunset","currentTime","dt","tempUnit","onClick","onMouseEnter","onMouseLeave","src","doneSVG","alt","plusSVG","Error","error","message","React","memo","LoadingSpinner","API","FavCity","handleCityChoose","handleDeleteFavCity","isTrashbinVisible","setIsTrashbinVisible","cn","trash","FavCitiesPortal","portal","document","createElement","useEffect","body","appendChild","ReactDom","createPortal","FavCities","setIsFavOpen","setFavCity","event","innerText","plus","map","item","App","isWeatherReceived","setIsWeatherReceived","setWeather","weatherBg","setWeatherBg","setError","isErrorReturned","setIsErrorReturned","isLoading","setIsLoading","isFavOpen","handleFetch","data","cod","icon","dayNight","key","fetch","then","response","json","getAttribute","stopPropagation","updatedCities","filter","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.e5a8ff74.chunk.js","sourcesContent":["import React from 'react';\n\nimport { useFocus } from '../../customHooks';\n\nexport const SearchBox = ({ query, setQuery, fetchWeather }) => {\n  const getWeather = e => {\n    if(query.length > 1) {\n      fetchWeather(e)\n    }\n  };\n\n\n\n  const [inputRef, setInputFocus] = useFocus();\n\n  return (\n    <div className=\"search-box\">\n      <input\n        autoFocus\n        ref={inputRef}\n        type=\"text\"\n        placeholder=\"Enter any city\"\n        className=\"search-bar\"\n        value={query}\n        onChange={e => setQuery(e.target.value)}\n        onKeyDown={getWeather}\n        onBlur={setInputFocus}\n      />\n    </div>\n  )\n}\n","import { useRef } from \"react\";\n\nexport const useFocus = () => {\n  const htmlElRef = useRef(null);\n  const setFocus = () => htmlElRef.current && htmlElRef.current.focus();\n\n  return [ htmlElRef, setFocus ];\n}\n","import React from 'react';\n\nconst Tooltip = ({ children }) => {\n  return (\n    <div className=\"tooltip\">{children}</div>\n  )\n}\n\nexport default Tooltip;\n","export const getCurrentDate = () => {\n  const dateObj = new Date();\n  const weekDays = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"];\n  const months = [\"January\", \"Fabruary\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n  \n  const weekDay = weekDays[dateObj.getDay()];\n  const date = dateObj.getDate();\n  const month = months[dateObj.getMonth()];\n  const year = dateObj.getFullYear();\n\n  const result = `${weekDay}, ${month} ${date}, ${year}`;\n\n  return result;\n}\n\nexport const alreadyHasCity = (favCities, city) => favCities.includes(city);\n","export default __webpack_public_path__ + \"static/media/done_icon.fffa60b2.svg\";","export default __webpack_public_path__ + \"static/media/plus_icon.bd0a06e6.svg\";","import React, { useState } from 'react';\n\nimport Tooltip from '../Tooltip/Tooltip';\nimport { getCurrentDate, alreadyHasCity } from '../../helpers';\nimport doneSVG from '../../../imgs/svg/done_icon.svg';\nimport plusSVG from '../../../imgs/svg/plus_icon.svg';\n\nconst WeatherInfo = ({ weather, setFavCities, favCities }) => {\n  const [ isTipShown, setIsTipShown ] = useState(false);\n\n  const temperature = Math.floor(weather.main.temp);\n  const weatherType = `${weather.weather[0].main} / ${weather.weather[0].description}`;\n  const currentCity = weather.name;\n  const currentState = weather.sys.country;\n  const feelsLike = Math.floor(weather.main.feels_like);\n  const tempMin = Math.floor(weather.main.temp_min);\n  const tempMax = Math.floor(weather.main.temp_max);\n  const humidity = weather.main.humidity;\n  const pressure = weather.main.pressure;\n  const sunrise = (new Date((weather.sys.sunrise + weather.timezone - 10800) * 1000).toLocaleTimeString().slice(0, 5));\n  const sunset = (new Date((weather.sys.sunset + weather.timezone - 10800) * 1000).toLocaleTimeString().slice(0, 5));\n  const currentTime = (new Date((weather.dt + weather.timezone - 10800) * 1000).toLocaleTimeString().slice(0, 5));\n  const tempUnit = {\n    celsius: \"°C\",\n    farhenheit: \"°F\"\n  }\n\n  const addFavCity = () => {\n    if (!alreadyHasCity(favCities, currentCity)) {\n      setFavCities([...favCities, currentCity]);\n    }\n  }\n\n  return (\n    <div className=\"info\">\n      <div className=\"info__location\">\n        {currentCity}, {currentState}\n        <button\n          type=\"button\"\n          className=\"addFavBtn\"\n          onClick={addFavCity}\n          onMouseEnter={() => setIsTipShown(true)}\n          onMouseLeave={() => setIsTipShown(false)}\n        >\n          {\n            alreadyHasCity(favCities, currentCity)\n            ? <img src={doneSVG} alt=\"done icon\" />\n            : <img src={plusSVG} alt=\"plus (add) icon\" />\n          }\n        </button>\n        {isTipShown && <Tooltip>{alreadyHasCity(favCities, currentCity) ? 'Added' : 'Add to Fav'}</Tooltip>}\n      </div>\n      <div className=\"info__date\">{getCurrentDate()} - {currentTime}</div>\n\n      <div className=\"info__temp\">\n        {temperature}&deg;C\n      </div>\n      <div className=\"info__weather\">\n        {weatherType}\n      </div>\n      <hr />\n      <div className=\"extra-container\">\n        <div className=\"extra extra--fst\">\n          <div className=\"extra__name\">Feels like</div>\n          <div className=\"extra__value\">{feelsLike}{tempUnit.celsius}</div>\n        </div>\n        <div className=\"extra\">\n          <div className=\"extra__name\">Min temperature</div>\n          <div className=\"extra__value\">{tempMin}{tempUnit.celsius}</div>\n        </div>\n        <div className=\"extra\">\n          <div className=\"extra__name\">Max temperature</div>\n          <div className=\"extra__value\">{tempMax}{tempUnit.celsius}</div>\n        </div>\n        <div className=\"extra\">\n          <div className=\"extra__name\">Sunrise</div>\n          <div className=\"extra__value\">{sunrise}</div>\n        </div>\n        <div className=\"extra\">\n          <div className=\"extra__name\">Sunset</div>\n          <div className=\"extra__value\">{sunset}</div>\n        </div>\n        <div className=\"extra\">\n          <div className=\"extra__name\">Humidity</div>\n          <div className=\"extra__value\">{humidity}%</div>\n        </div>\n        <div className=\"extra extra--last\">\n          <div className=\"extra__name\">Pressure</div>\n          <div className=\"extra__value\">{pressure}hPa</div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default WeatherInfo;\n","import React from 'react';\n\nconst Error = ({ error }) => (\n  <div className=\"info\">\n    <div className=\"info__location\">{error.message}</div>\n  </div>\n)\n\nexport default React.memo(Error);\n","import React from 'react';\n\nexport const LoadingSpinner = () => <div className=\"loader\" />","export const API = {\n  key: '429d2e287145e65ce74197b14fc241f4',\n  baseUrl: 'https://api.openweathermap.org/data/2.5/',\n};\n","export default __webpack_public_path__ + \"static/media/trash_icon.a309e0e4.svg\";","import React, { useState } from 'react';\nimport cn from 'classnames';\n\nimport trash from '../../../imgs/svg/trash_icon.svg';\n\nexport const FavCity = ({ city, handleCityChoose, handleDeleteFavCity }) => {\n  const [ isTrashbinVisible, setIsTrashbinVisible ] = useState(false);\n  return (\n    <li\n      key={city}\n      className=\"favCities__item\"\n      onClick={handleCityChoose}\n      value={city}\n      onMouseEnter={() => setIsTrashbinVisible(true)}\n      onMouseLeave={() => setIsTrashbinVisible(false)}\n    >\n      {city}\n      <span\n        className={cn(\"trashbin\", {\"trashbin--visible\": isTrashbinVisible})}\n        onClick={handleDeleteFavCity}\n      >\n        <img\n          className=\"trashbin__img\"\n          src={trash}\n          alt=\"delete city icon\"\n          data-value={city}\n        />\n      </span>\n    </li>\n  )\n}","import React, { useEffect } from 'react';\nimport ReactDom from 'react-dom';\nimport { FavCity } from '../FavCity/FavCity';\nimport plus from '../../../imgs/svg/plus_icon.svg';\n\nconst FavCitiesPortal = ({ children }) => {\n  const portal = document.createElement('div');\n\n  useEffect(() => document.body.appendChild(portal));\n\n  return ReactDom.createPortal(children, portal);\n}\n\nexport const FavCities = ({ favCities, setIsFavOpen, setFavCity, handleDeleteFavCity }) => {\n\n  const handleFavClose = () => setIsFavOpen(false);\n\n  const handleCityChoose = (event) => {\n    setIsFavOpen(false);\n    setFavCity(event.target.innerText);\n  }\n\n  if(favCities.length === 0) {\n    setIsFavOpen(false);\n  }\n\n  return (\n    <FavCitiesPortal>\n      <div className=\"favCitiesWrapper\">\n        <div className=\"favCities\">\n          <button\n            onClick={handleFavClose}\n            className=\"favCities__close\"\n          >\n            <img\n              className=\"favCities__closeImg\"\n              src={plus}\n              alt=\"cross to close popup\"\n            />\n          </button>\n          <h1 className=\"favCities__header\">Fav Cities</h1>\n          <ul className=\"favCities__list\">\n            {favCities.map(item => (\n              <FavCity\n                city={item}\n                handleCityChoose={handleCityChoose}\n                handleDeleteFavCity={handleDeleteFavCity}\n              />\n            ))}\n          </ul>\n        </div>\n      </div>\n    </FavCitiesPortal>\n  )\n}\n","import React, { useState } from 'react';\n\nimport { SearchBox } from './components/SearchBox/SearchBox';\nimport WeatherInfo from './components/WeatherInfo/WeatherInfo';\nimport Error from './components/Error/Error';\nimport { LoadingSpinner } from './components/LoadingSpinner/LoadingSpinner';\nimport { API } from './constants';\nimport { FavCities } from './components/FavCities/FavCities';\n\nconst App = () => {\n  const [ query, setQuery ] = useState('');\n  const [ isWeatherReceived, setIsWeatherReceived ] = useState(false);\n  const [ weather, setWeather ] = useState({});\n  const [ weatherBg, setWeatherBg ] = useState('');\n  const [ error, setError ] = useState({});\n  const [ isErrorReturned, setIsErrorReturned ] = useState(false);\n  const [ isLoading, setIsLoading ] = useState(false);\n  const [ isFavOpen, setIsFavOpen ] = useState(false);\n  const [ favCities, setFavCities ] = useState(['New York', 'Tokyo', 'London']);\n\n  const handleFetch = data => {\n    if(data.cod === \"404\") {\n      setIsLoading(false);\n      setIsErrorReturned(true);\n      setIsWeatherReceived(false);\n      setError(data);\n      setWeather({});\n    } else if (data.cod === 200) {\n      setIsLoading(false);\n      setWeather(data);\n      setWeatherBg(data.weather[0].icon);\n      setError({});\n      setIsErrorReturned(false);\n      setIsWeatherReceived(true);\n    }\n  }\n\n  const fetchWeather = e => {\n    if(e.key === \"Enter\") {\n      setIsLoading(true);\n      setIsErrorReturned(false);\n      setIsWeatherReceived(false);\n      fetch(`${API.baseUrl}weather?q=${query}&units=metric&APPID=${API.key}`)\n        .then(response => response.json())\n        .then(handleFetch)\n    }\n  }\n\n  const dayNight = weatherBg.slice(-1) === 'n' ? 'night' : '';\n\n  const toggleFavOpen = () => {\n    setIsFavOpen(!isFavOpen);\n  }\n\n  const handleDeleteFavCity = (e) => {\n    const currentCity = e.target.getAttribute(\"data-value\");\n    e.stopPropagation();\n    setIsFavOpen(true);\n    const updatedCities = favCities.filter(item => item !== currentCity);\n    setFavCities(updatedCities);\n  }\n\n  return (\n    <div\n      className={`app app-${weatherBg}`}\n    >\n      <main className=\"content\">\n        <span\n          className={`fav fav--${dayNight}`}\n          onClick={toggleFavOpen}\n        >\n          {favCities.length !== 0 && (\n            <span className=\"fav__num\">{favCities.length}</span>\n          )}\n        </span>\n        <h1 className={`appTitle appTitle--${dayNight}`}>Weather Forecast App</h1>\n        <SearchBox\n          query={query}\n          setQuery={setQuery}\n          fetchWeather={fetchWeather}\n        />\n        {isWeatherReceived && (\n          <WeatherInfo\n            favCities={favCities}\n            setFavCities={setFavCities}\n            weather={weather}\n          />\n        )}\n        {isErrorReturned && (\n          <Error\n            error={error}\n          />\n        )}\n        {isLoading && <LoadingSpinner />}\n        {isFavOpen && (\n          <FavCities\n            favCities={favCities}\n            setIsFavOpen={setIsFavOpen}\n            setFavCity={setQuery}\n            handleDeleteFavCity={handleDeleteFavCity}\n          />\n        )}\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './js/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}